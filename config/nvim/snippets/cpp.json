{
	"beginend_": {
		"prefix": "beginend_",
		"body": "begin(${1:v}), end(${1:v})\n",
		"description": "std::begin($1), std::end($1)",
		"scope": "source.c++"
	},
	"bintempfunctor": {
		"prefix": "bintempfunctor",
		"body": "struct ${1:name} {\n\ttemplate<typename T, typename U>\n\tconstexpr auto operator()(T&& t, U&& u) const noexcept -> decltype(${2:/* code */}) {\n\t\treturn ${2:/* code */};\n\t}\n};\n",
		"description": "Binary Template Functor",
		"scope": "source.c++"
	},
	"lamref": {
		"prefix": "lamref",
		"body": "[&](${1:/* args */}) {\n\t${2:/* code */}\n}\n",
		"description": "Lambda – Catch All by Reference",
		"scope": "source.c++, source.c++11"
	},
	"lamval": {
		"prefix": "lamval",
		"body": "[=](${1:/* args */}) {\n\t${2:/* code */}\n}\n",
		"description": "Lambda – Catch All by Value",
		"scope": "source.c++, source.c++11"
	},
	"clanggreater": {
		"prefix": "clanggreater",
		"body": "defined(__clang__) && ((__clang_major__ > ${1:3}) || (__clang_major__ == ${1:3}) && (__clang_minor__ >= ${2:2}))\n",
		"description": "Clang Version >= Check",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"clangless": {
		"prefix": "clangless",
		"body": "defined(__clang__) && ((__clang_major__ < ${1:3}) || (__clang_major__ == ${1:3}) && (__clang_minor__ <= ${2:2}))\n",
		"description": "Clang Version <= Check",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"class_": {
		"prefix": "class_",
		"body": "class ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} {\nprivate:\n\t${2:/* data */}\npublic:\n\t${1/(\\w+).*/$1/}(${3:/* args */}) ${4:= default;}\n};\n",
		"description": "Class",
		"scope": "source.c++, source.objc++"
	},
	"classtemp": {
		"prefix": "classtemp",
		"body": "template<typename ${1:T}>\nclass ${2:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} {\nprivate:\n\t${3:/* data */}\npublic:\n\t${2/(\\w+).*/$1/}(${4:/* args */}) ${5:= default;}\n};\n",
		"description": "Class Template",
		"scope": "source.c++, source.objc++"
	},
	"confunct": {
		"prefix": "confunct",
		"body": "constexpr ${1:int} ${2:function_name}(${3:/* args */}) {\n\treturn ${0:/* code */};\n}\n",
		"description": "Constexpr Function",
		"scope": "source.c++"
	},
	"declv": {
		"prefix": "declv",
		"body": "std::declval<${1:T}>()\n",
		"description": "std::declval<T>()",
		"scope": "source.c++"
	},
	"do_": {
		"prefix": "do_",
		"body": "do {\n\t${0:/* code */}\n} while (${1:/* condition */});\n",
		"description": "Do While Loop",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"excep": {
		"prefix": "excep",
		"body": "class ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} : public ${2:std::runtime_error} {\npublic:\n\t${1/(\\w+).*/$1/}(const std::string& str): ${2:std::runtime_error}(${3:str}) {}\n};\n",
		"description": "Create exception",
		"scope": "source.c++, source.objc++"
	},
	"for_": {
		"prefix": "for_",
		"body": "for(unsigned ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {\n\t${0:/* code */}\n}\n",
		"description": "For Loop",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"forw": {
		"prefix": "forw",
		"body": "std::forward<${1:T}>(${2:t})\n",
		"description": "std::forward<T>(…)",
		"scope": "source.c++"
	},
	"lamfull": {
		"prefix": "lamfull",
		"body": "[${1:/* capture */}](${2:/* args */}) ${3:mutable} ${4:noexcept} -> ${5:/* return */} {\n\t${6:/* code */}\n}\n",
		"description": "Lambda – Full Spec",
		"scope": "source.c++, source.c++11"
	},
	"functor": {
		"prefix": "functor",
		"body": "struct ${1:name} {\n\t${2:bool} operator()(${3:/* args */}) const noexcept {\n\t\t${0:/* code */}\n\t}\n};\n",
		"description": "Functor",
		"scope": "source.c++"
	},
	"gccgreater": {
		"prefix": "gccgreater",
		"body": "defined(__GNUC__) && ((__GNUC__ > ${1:4}) || ((__GNUC__ == ${1:4}) && (__GNUC_MINOR__ >= ${2:7})))\n",
		"description": "GCC Version >= Check",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"gccless": {
		"prefix": "gccless",
		"body": "defined(__GNUC__) && ((__GNUC__ < ${1:4}) || ((__GNUC__ == ${1:4}) && (__GNUC_MINOR__ <= ${2:7})))\n",
		"description": "GCC Version <= Check",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"if_": {
		"prefix": "if_",
		"body": "if(${1:/* condition */}) {\n\t${0:/* code */}\n}\n",
		"description": "if(…)",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"ifelifpre": {
		"prefix": "ifelifpre",
		"body": "#if ${1:/* condition */}\n${2:/* code */}\n#elif ${3:/* condition */}\n${4:/* code */}\n#else\n${0:/* code */}\n#endif\n",
		"description": "#if … #elif … #else",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": "if(${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse {\n\t${0:/* code */}\n}\n",
		"description": "if(…) else",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"ifelsepre": {
		"prefix": "ifelsepre",
		"body": "#if ${1:/* condition */}\n${2:/* code */}\n#else\n${0:/*code */}\n#endif\n",
		"description": "#if … #else",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"ifelif": {
		"prefix": "ifelif",
		"body": "if(${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse if(${3:/* condition */}) {\n\t${4:/* code */}\n}\nelse {\n\t${0:/* code */}\n}\n",
		"description": "if(…) else if(…) else",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"ifnd": {
		"prefix": "ifnd",
		"body": "#ifndef $1\n#define ${1:${TM_FILENAME/(([A-Z])([A-Z][a-z]))|(([a-z])([A-Z]))|([a-z])|(\\.)/\\U(?1:$2_$3)(?4:$5_$6)$7(?8:_)\\E/g}}\n\n${0}\n\n#endif // $1\n",
		"description": "ifndef (…)",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"cpptraitfun": {
		"prefix": "cpptraitfun",
		"body": "struct ${1:my_trait}_impl {\n\ttemplate<typename T, ${$2:/* expression SFINAE here */}>\n\tstatic std::true_type test(int);\n\ttemplate<typename...>\n\tstatic std::false_type test(...);\n};\n\ntemplate<typename T>\nstruct ${1:my_trait} : decltype(${1:my_trait}_impl::test<T>(0)) {};\n$0\n",
		"description": "Do While Loop",
		"scope": "source.c++"
	},
	"lamret": {
		"prefix": "lamret",
		"body": "[${1:/* capture */}](${2:/* args */}) -> ${3:/* return */} {\n\t${4:/* code */}\n}\n",
		"description": "Lambda – Explicit Return Declaration",
		"scope": "source.c++, source.c++11"
	},
	"main_": {
		"prefix": "main_",
		"body": "int main(int argc, char const *argv[]) {\n\t${1:/* code */}\n\treturn 0;\n}\n",
		"description": "main(…)",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"lammin": {
		"prefix": "lammin",
		"body": "[${1:/* capture */}] {\n\t${2:/* code */}\n}\n",
		"description": "Lambda – Minimal",
		"scope": "source.c++, source.c++11"
	},
	"mitl": {
		"prefix": "mitl",
		"body": "// The MIT License (MIT)\n\n// Copyright (c) ${1:YEAR} ${2:NAME}\n\n//  Permission is hereby granted, free of charge, to any person obtaining a\n//  copy of this software and associated documentation files (the \"Software\"),\n//  to deal in the Software without restriction, including without limitation\n//  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n//  and/or sell copies of the Software, and to permit persons to whom the\n//  Software is furnished to do so, subject to the following conditions:\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n//  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//  DEALINGS IN THE SOFTWARE.\n\n${0:/* code */}\n",
		"description": "MIT License",
		"scope": ""
	},
	"name": {
		"prefix": "name",
		"body": "namespace ${1:name} {\n\t$0\n} // $1\n",
		"description": "Namespace",
		"scope": "source.c++, source.objc++"
	},
	"forrange": {
		"prefix": "forrange",
		"body": "for(auto&& ${1:i} : ${2:v}) {\n\t$0\n}\n",
		"description": "Range-based For Loop",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"funct": {
		"prefix": "funct",
		"body": "${1:int} ${2:function_name}(${3:/* args */}) {\n\t${0:/* code */}\n}\n",
		"description": "Regular Function",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"returns": {
		"prefix": "returns",
		"body": "-> decltype(${1:/* code */}) {\n\treturn ${1:/* code */};\n}\n",
		"description": "-> decltype(…)",
		"scope": "source.c++"
	},
	"struct_": {
		"prefix": "struct_",
		"body": "struct ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} {\n\t${0:/* data */}\n};\n",
		"description": "Struct",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	},
	"structtemp": {
		"prefix": "structtemp",
		"body": "template<typename ${1:T}>\nstruct ${2:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} {\n\t${0:/* code */}\n};\n",
		"description": "Templated Struct",
		"scope": "source.c++, source.objc++"
	},
	"tem": {
		"prefix": "tem",
		"body": "template<typename ${1:T}>\n",
		"description": "Template",
		"scope": "source.c++, source.objc++"
	},
	"tempfunc": {
		"prefix": "tempfunc",
		"body": "template<typename ${1:T}>\n${2:int} ${3:function_name}(${4:/* args */}) noexcept {\n\t$0\n}\n",
		"description": "Templated Function",
		"scope": "source.c++"
	},
	"tempfunca": {
		"prefix": "tempfunca",
		"body": "template<typename ${1:T}>\nauto ${2:function_name}(${3:/* args */}) -> decltype(${4:/* expression */}) {\n\t${0:/* code */}\n}\n",
		"description": "Template Auto Function",
		"scope": "source.c++, source.objc++"
	},
	"tempcfunca": {
		"prefix": "tempcfunca",
		"body": "template<typename ${1:T}>\nconstexpr auto ${2:function_name}(${3:/* args */}) noexcept -> decltype(${4:/* code */}) {\n\treturn ${4:/* code */};\n}\n",
		"description": "Template Auto Constexpr Function",
		"scope": "source.c++"
	},
	"tempcfunc": {
		"prefix": "tempcfunc",
		"body": "template<typename ${1:T}>\nconstexpr ${2:int} ${3:function_name}(${4:/* args */}) {\n\treturn ${5:/* code */};\n}\n",
		"description": "Template Constexpr Function",
		"scope": "source.c++"
	},
	"try": {
		"prefix": "try",
		"body": "try {\n\t${1:/* code */}\n}\ncatch(${2:const std::exception& e}) {\n\t${0:std::cerr << e.what() << '\\n';}\n}\n",
		"description": "Try Catch Block",
		"scope": "source.c++, source.objc++, source.c++11"
	},
	"tempfunctor": {
		"prefix": "tempfunctor",
		"body": "struct ${1:name} {\n\ttemplate<typename T>\n\tconstexpr auto operator()(T&& t) const noexcept -> decltype(${2:/* code */}) {\n\t\treturn ${2:/* code */};\n\t}\n};\n",
		"description": "Unary Template Functor",
		"scope": "source.c++"
	},
	"usings": {
		"prefix": "usings",
		"body": "using ${1:my_type} = ${2:int};\n",
		"description": "Using Statement",
		"scope": "source.c++"
	},
	"usingt": {
		"prefix": "usingt",
		"body": "template<typename ${1:T}>\nusing ${2:Type} = ${3:typename T::type};\n",
		"description": "Using Statement (Templated)",
		"scope": "source.c++"
	},
	"temv": {
		"prefix": "temv",
		"body": "template<typename... ${1:Args}>\n",
		"description": "Variadic Template",
		"scope": "source.c++, source.objc++, source.c++11"
	},
	"while": {
		"prefix": "while",
		"body": "while(${1:/* condition */}) {\n\t${2:/* code */}\n}\n",
		"description": "While Loop",
		"scope": "source.c, source.objc, source.c++, source.objc++"
	}
}
