#!/usr/bin/env python3
import subprocess
import shutil
import sys
import yaml
import json


PACMAN_BIN = shutil.which("yay")
NPM_BIN = shutil.which("npm")
PIP_BIN = shutil.which("pip")
CARGO_BIN = shutil.which("cargo")

if not PACMAN_BIN:
    print("cann't find yay binary in $PATH")
    sys.exit(-1)

if not NPM_BIN:
    print("cann't find npm binary in $PATH")
    sys.exit(-1)

if not PIP_BIN:
    print("cann't find pip binary in $PATH")
    sys.exit(-1)

if not CARGO_BIN:
    print("cann't find cargo binary in $PATH")
    sys.exit(-1)


def is_group(name):
    result = pacman(["-Sg", name])
    return result["returncode"] == 0


def get_group_packages(name):
    result = pacman(["-Sg", name])
    if result["returncode"] == 0:
        return [package.split(" ")[1] for package in result["stdout"].split("\n")]
    return None


def pacman(flags: list) -> dict:
    cmd = [PACMAN_BIN, *flags]
    p = subprocess.Popen(cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    data = p.communicate()
    return {
        "returncode": p.returncode,
        "stdout": data[0].rstrip(b'\n').decode(),
        "stderr": data[1].rstrip(b'\n').decode()
    }


def current_installed():
    current = pacman(["-Q"])
    installed_packages = [name.split(" ")[0]
                          for name in current["stdout"].split("\n")]

    return set(installed_packages)


def check_yay(info):
    if not info:
        return
    installed_packages = current_installed()
    ignore_packages = set(info["ignore"])
    need_packages = []
    for group in info["groups"]:
        own_packages = get_group_packages(group)
        if own_packages:
            need_packages.extend(own_packages)
        else:
            print(f"Error: Unknow yay group {group}")
    need_packages.extend(info["packages"])
    need_install = []
    for package in need_packages:
        if package not in installed_packages and package not in ignore_packages:
            need_install.append(package)

    if len(need_install) > 0:
        cmd = [PACMAN_BIN, '--noconfirm', '-S', *need_install]
        print(f"> {' '.join(cmd)}")
        subprocess.run(cmd)

    output = pacman(["-Qet"])["stdout"]
    explicit_packages = set([name.split(" ")[0]
                            for name in output.split("\n")])
    installed_packages = current_installed()
    echo_packages = []
    for package in explicit_packages:
        if package not in need_packages and package not in ignore_packages:
            echo_packages.append(package)

    if len(echo_packages) > 0:
        print("local Linux install package explicitly, but not register in `packages.yaml")
        print(f"please check: {' '.join(echo_packages)}")


def check_npm(info):
    if not info:
        return

    need_packages = info
    cmd = [NPM_BIN, "list", "--location=global", "--json"]
    p = subprocess.run(cmd, stdout=subprocess.PIPE)
    output = json.loads(p.stdout.decode())
    installed_packages = set([pkg for pkg in output["dependencies"]])
    need_install = []
    for package in need_packages:
        if package not in installed_packages:
            need_install.append(package)
    if len(need_install) > 0:
        cmd = [NPM_BIN, "install", '--location=global', *need_install]
        print(f"> {' '.join(cmd)}")
        subprocess.run(cmd)


def check_pip(info):
    if not info:
        return

    need_packages = info
    p = subprocess.run([PIP_BIN, "list"], stdout=subprocess.PIPE)
    output = p.stdout.decode()
    installed_packages = set([pkg.split(" ")[0] for pkg in output.split("\n")])

    need_install = []
    for package in need_packages:
        if package not in installed_packages:
            need_install.append(package)
    if len(need_install) > 0:
        cmd = [PIP_BIN, "install", *need_install]
        print(f"> {' '.join(cmd)}")
        subprocess.run(cmd)


def check_cargo(info):
    if not info:
        return

    need_packages = info
    p = subprocess.run([CARGO_BIN, "install", "--list"],
                       stdout=subprocess.PIPE)
    output = p.stdout.decode()

    installed_packages = set([pkg.split(" ")[0]
                             for pkg in output.split("\n") if len(pkg) > 0 and pkg[0] != " "])
    need_install = []
    for package in need_packages:
        if package not in installed_packages:
            need_install.append(package)
    if len(need_install) > 0:
        cmd = [CARGO_BIN, "install", *need_install]
        print(f"> {' '.join(cmd)}")
        subprocess.run(cmd)


if __name__ == "__main__":
    with open("packages.yaml") as file:
        info = yaml.load(file, yaml.Loader)
        check_yay(info['yay'])
        check_npm(info['npm'])
        check_pip(info['pip'])
        check_cargo(info['cargo'])
    pass
