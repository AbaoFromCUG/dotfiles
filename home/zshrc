# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

# Zinit configure
zinit snippet OMZL::clipboard.zsh
zinit snippet OMZL::completion.zsh
zinit snippet OMZL::history.zsh
zinit snippet OMZL::key-bindings.zsh
zinit snippet OMZL::git.zsh
zinit snippet OMZL::grep.zsh
zinit snippet OMZL::theme-and-appearance.zsh

zinit snippet OMZP::git
zinit snippet OMZP::python
zinit snippet OMZP::command-not-found
# zinit snippet OMZP::vi-mode
# alias la,ll
zinit snippet OMZP::common-aliases

# some plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit wait lucid atload"zicompinit; zicdreplay" blockf for \
    zsh-users/zsh-completions

# theme
zinit ice depth=1;
zinit light romkatv/powerlevel10k
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# End of Zinit configure

# Enable 256 color to make auto-suggestions look nice
# export TERM="screen-256color"

function docker_ip() {
    sudo docker inspect --format '{{ .NetworkSettings.IPAddress  }}' "$1"
}

function yay() {
    # avoid install python package to pyenv python site
    PYENV_VERSION=system /usr/bin/yay "${@}"
}

function clash_update() {
    url=$1
    secret=$2
    config_file="$HOME/.config/clash/config.yaml"
    wget "$url" -O "$config_file" --no-check-certificate
    sed -i '/^#/d' "$config_file"
    sed -i 's/^port:.*$/mixed-port: 8888/g' "$config_file"
    sed -i 's/^log-level: silent$/log-level: info/g' "$config_file"
    sed -i "s/^secret:.*$/secret: ${secret}/g" "$config_file"
    sed -i '/^socks-port:/d' "$config_file"
    sed -i '/^redir-port:/d' "$config_file"
    sed -i '/^allow-lan/d' "$config_file"
    sed -i '/^\s*$/d' "$config_file"
}

